{"./":{"url":"./","title":"前言","keywords":"","body":"个人主页 个人主页地址：https://blog.wdg.pub/ 主要是个人学习、工作经验的总结，不断完善中··· 如果存在错误，或者有好的建议还请多指教，提交反馈 个人GitHub地址：https://github.com/jekorx Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-23 14:58:22 "},"index/nodejs.html":{"url":"index/nodejs.html","title":"Node.js","keywords":"","body":"Node.js 主要是基于Node.js一些常用工具的介绍，基本用法总结。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 10:46:16 "},"nodejs/process-manager.html":{"url":"nodejs/process-manager.html","title":"PM2","keywords":"","body":"PM2（Process Manager 2） Node进程管理工具，简化Node App管理的繁琐任务，如性能监控、自动重启、负载均衡等。 常用命令 # 启动app pm2 start yarn --name AppName -- start # 查看所有app pm2 list # or pm2 ls # 启动，all表示全部app，CMD表示命令（如：yarn），-i max 表示cluster模式，数量为最大cpu核数，--watch表示当文件变化时自动重启应用，args表示参数 pm2 start [id | AppName | all | CMD] --name [AppName] -i max --watch -- [args] # 停止，all表示全部app pm2 stop [id | AppName | all] # 重启，相当于先 stop 再 start，会导致服务短时间内无法使用，all表示全部app pm2 restart [id | AppName | all] # 热重载，多用于cluster模式，逐个重新启动所有进程，始终保持至少一个进程在运行，实现不停机重载 pm2 reload [AppName] # 删除，all表示全部app pm2 delete [id | AppName | all] # 监控 pm2 monit [id | AppName] # 日志 pm2 logs 常见错误 windows系统常见错误（1） # 报错信息 C:\\USERS\\\\APPDATA\\ROAMING\\NPM\\YARN.CMD:1 (function (exports, require, module, __filename, __dirname) { @IF EXIST \"%~dp0\\node.exe\" ( ^ SyntaxError: Invalid or unexpected token at new Script (vm.js:79:7) at createScript (vm.js:251:10) at Object.runInThisContext (vm.js:303:10) at Module._compile (internal/modules/cjs/loader.js:656:28) at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10) at Module.load (internal/modules/cjs/loader.js:598:32) at tryModuleLoad (internal/modules/cjs/loader.js:537:12) at Function.Module._load (internal/modules/cjs/loader.js:529:3) at Object. (C:\\Users\\wangdg\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\pm2\\lib\\ProcessContainerFork.js:27:21) at Module._compile (internal/modules/cjs/loader.js:688:30) C:\\USERS\\\\APPDATA\\ROAMING\\NPM\\YARN.CMD:1 (function (exports, require, module, __filename, __dirname) { @IF EXIST \"%~dp0\\node.exe\" ( # 错误分析 在Windows上，yarn.cmd它不是有效的，您必须直接运行Node.js命令 # 解决方法 pm2 start C:\\Users\\\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin\\yarn.js --name nuxt -- start Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 15:35:09 "},"nodejs/http-server.html":{"url":"nodejs/http-server.html","title":"Http-Server","keywords":"","body":"http-server http-server是一个简单的，零配置的命令行http服务器。 安装 npm install http-server -g # or yarn global add http-server 使用 http-server [path] [options] 可用选项 -p 要使用的端口（默认为8080） -a 要使用的地址（默认为0.0.0.0） -d 显示目录列表（默认为'True'） -i 显示autoIndex（默认为'True'） -g或者--gzip当启用时（默认为'False'），它将./public/some-file.js.gz代替./public/some-file.js当文件的gzip压缩版本存在且请求接受gzip编码时。 -e或者--ext如果没有提供默认文件扩展名（默认为'html'） -s或者--silent从输出中抑制日志消息 --cors通过Access-Control-Allow-Origin标头启用CORS -o 启动服务器后打开浏览器窗口 -c设置缓存控制max-age标头的缓存时间（以秒为单位），例如-c10为10秒（默认为“3600”）。要禁用缓存，请使用-c-1。 -U或--utc在日志消息中使用UTC时间格式。 -P或者将--proxy所有无法在本地解析的请求代理到给定的URL。例如：-P http://someurl.com -S或--ssl启用https。 -C或--certssl cert文件的路径（默认值：cert.pem）。 -K或--keyssl密钥文件的路径（默认值：key.pem）。 -r或--robots提供/robots.txt（其内容默认为'User-agent：* \\ nDisisis：/'） -h或--help打印此列表并退出。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"index/frontend.html":{"url":"index/frontend.html","title":"前端","keywords":"","body":"Web前端 前端相关使用总结。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 10:49:39 "},"frontend/axios.html":{"url":"frontend/axios.html","title":"Axios","keywords":"","body":"Axios Axios 是一个基于promise的HTTP库，可以用在浏览器和node.js中。 安装 yarn add axios # or npm i axios -S 基本使用 /** * 1、基础使用1 * axios(config) * 2、基础使用2，url不在配置中指定 * axios(url[, config]) * 3、默认请求方法别名 * 使用别名方法时， url、method、data 这些属性都不必在配置中指定。 * axios.request(config) * axios.get(url[, config]) * axios.delete(url[, config]) * axios.head(url[, config]) * axios.post(url[, data[, config]]) * axios.put(url[, data[, config]]) * axios.patch(url[, data[, config]]) * 4、并发 * axios.all(iterable) * axios.spread(callback) * 例： * let axiosList=[ * axios.get('url1', { params: 'xxx' }), * axios.get('url2', { params: 'xxx' }) * ] * axios.all(axiosList).then(axios.spread((res1,res2) => { * console.log(res1,res2) // 分别是两个请求的返回值 * }) * 5、创建实例 * axios.create([config]) */ /** * promise方式 */ function get () { axios.get('/user?ID=12345') .then(res => { console.log(res) }) .catch(err => { console.log(err) }) } function post () { axios.post('/user', { firstName: 'Fred', lastName: 'Flintstone' }) .then(res => { console.log(res) }) .catch(err => { console.log(err) }) } /** * async/await方式 */ async function gets () { try { let data1 = await axios.get('url1', { params: 'xxx' }) let data2 = await axios.get('url2', { params: 'xxx' }) console.log(data1, data2) } catch (error) { console.log(error) } } 常用配置 import axios from 'axios' import qs from 'qs' /** * axios config */ // url 前缀 axios.defaults.baseURL = process.env.NODE_ENV === 'production' ? '/web/' : '/api/' // 跨域请求时携带cookie axios.defaults.withCredentials = true /** * axios 默认 Content-Type: application/json;charset=UTF-8 * 请求正文为Request Payload，格式是json格式的字符串 * 台用@RequestParam是接收不到参数的，只能用@RequestBody * 配置transformRequest，参数使用qs转换 * 请求头Content-Type会被设置为: application/x-www-form-urlencoded * 请求正文为Form Data，格式是key=value&key1=value2 * 对于 Form Data 请求，后台无需任何注解，即可解析参数 */ // 请求数据转json字符串（JSON.stringify()不行） axios.defaults.transformRequest = [params => qs.stringify(params)] // 请求统一额外参数 axios.defaults.params = { apiuser: 'debug' } // 请求拦截器 axios.interceptors.request.use(config => { // 请求发出前，可以开始加载动画之类的操作 return config }, error => { // 请求发出错误处理 return Promise.reject(error) }) // 响应拦截器 axios.interceptors.response.use(response => { // 接收到响应处理，停止加载动画之类操作 return response }, error => { // 响应错误处理，统一异常处理 console.log(error.stack) return Promise.reject(error) }) 使用全局默认配置，特殊使用时配置 使用了上述全局配置之后，请求头Content-Type会被设置为: application/x-www-form-urlencoded 如果上传文件需要将Content-Type设置为multipart/form-data，具体使用如下所示 /** * 使用axios上传文件，ajax文件上传 */ // input(type=\"file\" onchange=\"fileChange\" multiple=\"multiple\") // 设置multiple可以选择多个文件 function fileChange (e) { // 获取文件对象数组 let files = e.target.files // 创建一个FormData，存储需要提交的表单数据，如果通过ajax方式上传文件，必须使用FormData let formData = new FormData() // 普通表单数据 formData.append('num', 123) formData.append('name', 'aa') // 文件数据 formData.append('file', files[0]) // 多个文件数据需要遍历放入 for (let f of files) { formData.append('files', f) } // 上传data必须转为formData axios.post('/upload', formData, { // 覆盖默认设置中的transformRequest设置 transformRequest: [(params, headers) => { // 请求头Content-Type 为multipart/form-data headers = { 'Content-Type': 'multipart/form-data' } // 取消qs参数转换 return params }], // 上传进度 onUploadProgress ({ loaded, total }) { let p = (loaded / total * 100).toFixed(0) + '%' console.log(p) } }).then(res => console.log(res)) } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 10:35:47 "},"frontend/editorconfig.html":{"url":"frontend/editorconfig.html","title":"EditorConfig","keywords":"","body":"EditorConfig 项目根目录中添加.editorconfig文件，并在开发工具中安装相应插件，如：VSCode安装EditorConfig for Visual Studio Code # editorconfig.org root = true [*] indent_style = space indent_size = 2 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true # markdown文件不去掉结尾空格 [*.md] trim_trailing_whitespace = false Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"frontend/eslint.html":{"url":"frontend/eslint.html","title":"ESLint","keywords":"","body":"ESLint ESLint是一个语法规则和代码风格的检查工具。项目中使用ESLint可以避免一些低级错误、格式错误，统一项目代码风格，更有利于团队协作等。开发工具中需添加ESLint扩展，如：VSCode中ESLint插件。个人更倾向于使用standard规范，以standard规范为例。 在Reactjs脚手架create-react-app@1.5.2中使用ESLint /** * 由于CRA中默认支持ESLint，只需添加相关依赖和配置即可 */ // 1、安装依赖 yarn add babel-eslint eslint eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-react eslint-plugin-standard -D // 2、eslint相关配置，项目根目录中添加.eslintrc文件 { \"extends\": [ \"standard\", \"plugin:react/recommended\" ], \"env\": { \"browser\": true, \"commonjs\": true, \"node\": true, \"es6\": true }, \"parser\": \"babel-eslint\", \"parserOptions\": { \"ecmaVersion\": 7, \"sourceType\": \"module\", \"ecmaFeatures\": { \"jsx\": true } }, \"plugins\": [ \"react\" ], \"rules\": { \"arrow-parens\": [\"error\", \"as-needed\"], \"object-curly-spacing\": [1, \"always\"] } } // 3、eslint校验忽略，项目根目录中添加.eslintignore文件 /build/ /public/ /*.js 在Vuejs脚手架vue-cli@2.9.x中使用ESLint /** * 只需在构建项目时根据提示操作即可 */ // 1、构建项目时，Use ESLint to lint your code? Y // 2、Pick an ESLint preset，选择上下箭头选择Standard (https://github.com/standard/standard) 在Nuxtjs脚手架create-nuxt-app@2.4.0中使用ESLint // 1、构建项目时，Choose features to install，上下箭头+空格勾选Linter / Formatter这一项 // 2、去除不必要的依赖 yarn remove @nuxtjs/eslint-config -D // 3、修改.eslintrc.js module.exports = { root: true, env: { browser: true, node: true }, parserOptions: { parser: 'babel-eslint' }, extends: [ // '@nuxtjs' // https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention // consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules. 'plugin:vue/essential', // https://github.com/standard/standard/blob/master/docs/RULES-en.md 'standard' ], // required to lint *.vue files plugins: [ 'vue' ], // add your custom rules here rules: { // allow async-await 'generator-star-spacing': 'off', // allow debugger during development 'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off' } } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-23 14:59:03 "},"frontend/vue-quill-editor.html":{"url":"frontend/vue-quill-editor.html","title":"VueQuillEditor","keywords":"","body":"Vue-Quill-Editor（自定义使用） 基于Vue的Quill富文本编辑器自定义toolbar1、图片拖拽上传服务器后，在文本区域内添加图片2、图片弹窗上传选择，在文本区域内添加图片3、将样式默认使用class的替换为内联样式 div quillEditor( ref=\"editorRef\" v-model=\"content\" :options=\"editorOption\" @change=\"onContentChange\") div(:id=\"[toolbar]\" slot=\"toolbar\") span.ql-formats button.ql-bold(type=\"button\") span.ql-formats button.ql-italic(type=\"button\") span.ql-formats button.ql-underline(type=\"button\") span.ql-formats button.ql-strike(type=\"button\") span.ql-formats button.ql-blockquote(type=\"button\") span.ql-formats button.ql-code-block(type=\"button\") span.ql-formats button.ql-header(value=\"1\" type=\"button\") span.ql-formats button.ql-header(value=\"2\" type=\"button\") span.ql-formats button.ql-list(value=\"ordered\" type=\"button\") span.ql-formats button.ql-list(value=\"bullet\" type=\"button\") span.ql-formats button.ql-script(value=\"sub\" type=\"button\") span.ql-formats button.ql-script(value=\"super\" type=\"button\") //- 缩进无法使用内联样式代替class样式 //span.ql-formats button.ql-indent(value=\"-1\" type=\"button\") //span.ql-formats button.ql-indent(value=\"+1\" type=\"button\") //span.ql-formats button.ql-direction(value=\"rtl\" type=\"button\") span.ql-formats //- 默认字体大小 //select.ql-size option(value=\"small\") option(selected) option(value=\"large\") option(value=\"huge\") //- 自定义字体大小，需对应修改js中SizeStyle.whitelist，以及相关样式 select.ql-size option(value=\"12px\") 12px option(selected) 14px option(value=\"16px\") 16px option(value=\"18px\") 18px option(value=\"20px\") 20px option(value=\"22px\") 22px option(value=\"24px\") 24px option(value=\"26px\") 26px option(value=\"28px\") 28px option(value=\"30px\") 30px option(value=\"32px\") 32px span.ql-formats select.ql-header option(value=\"1\") option(value=\"2\") option(value=\"3\") option(value=\"4\") option(value=\"5\") option(value=\"6\") option(selected=\"selected\") span.ql-formats select.ql-color option(selected=\"selected\") option(value=\"#e60000\") option(value=\"#ff9900\") option(value=\"#ffff00\") option(value=\"#008a00\") option(value=\"#0066cc\") option(value=\"#9933ff\") option(value=\"#ffffff\") option(value=\"#facccc\") option(value=\"#ffebcc\") option(value=\"#ffffcc\") option(value=\"#cce8cc\") option(value=\"#cce0f5\") option(value=\"#ebd6ff\") option(value=\"#bbbbbb\") option(value=\"#f06666\") option(value=\"#ffc266\") option(value=\"#ffff66\") option(value=\"#66b966\") option(value=\"#66a3e0\") option(value=\"#c285ff\") option(value=\"#888888\") option(value=\"#a10000\") option(value=\"#b26b00\") option(value=\"#b2b200\") option(value=\"#006100\") option(value=\"#0047b2\") option(value=\"#6b24b2\") option(value=\"#444444\") option(value=\"#5c0000\") option(value=\"#663d00\") option(value=\"#666600\") option(value=\"#003700\") option(value=\"#002966\") option(value=\"#3d1466\") span.ql-formats select.ql-background option(value=\"#000000\") option(value=\"#e60000\") option(value=\"#ff9900\") option(value=\"#ffff00\") option(value=\"#008a00\") option(value=\"#0066cc\") option(value=\"#9933ff\") option(selected=\"selected\") option(value=\"#facccc\") option(value=\"#ffebcc\") option(value=\"#ffffcc\") option(value=\"#cce8cc\") option(value=\"#cce0f5\") option(value=\"#ebd6ff\") option(value=\"#bbbbbb\") option(value=\"#f06666\") option(value=\"#ffc266\") option(value=\"#ffff66\") option(value=\"#66b966\") option(value=\"#66a3e0\") option(value=\"#c285ff\") option(value=\"#888888\") option(value=\"#a10000\") option(value=\"#b26b00\") option(value=\"#b2b200\") option(value=\"#006100\") option(value=\"#0047b2\") option(value=\"#6b24b2\") option(value=\"#444444\") option(value=\"#5c0000\") option(value=\"#663d00\") option(value=\"#666600\") option(value=\"#003700\") option(value=\"#002966\") option(value=\"#3d1466\") span.ql-formats //- 默认字体 //select.ql-font option(selected=\"selected\") option(value=\"serif\") option(value=\"monospace\") //- 自定义字体，需对应修改js中FontStyle.whitelist，以及相关样式 select.ql-font option(selected=\"selected\") option(value=\"宋体\") 宋体 option(value=\"黑体\") 黑体 option(value=\"楷体\") 楷体 option(value=\"微软雅黑\") 微软雅黑 option(value=\"Arial\") Arial option(value=\"Verdana\") Verdana option(value=\"Georgia\") Georgia option(value=\"Times New Roman\") Times New Roman option(value=\"Microsoft JhengHei\") Microsoft JhengHei option(value=\"Trebuchet MS\") Trebuchet MS option(value=\"Courier New\") Courier New option(value=\"Impact\") Impact option(value=\"Comic Sans MS\") Comic Sans MS option(value=\"Consolas\") Consolas span.ql-formats select.ql-align option(selected=\"selected\") option(value=\"center\") option(value=\"right\") option(value=\"justify\") span.ql-formats button.ql-clean(type=\"button\") span.ql-formats button.ql-link(type=\"button\") span.ql-formats //- 自定义图片选择器 button(type=\"button\" @click=\"imgModal = true\") svg(viewBox=\"0 0 18 18\") rect.ql-stroke(height=\"10\" width=\"12\" x=\"3\" y=\"4\") circle.ql-fill(cx=\"6\" cy=\"7\" r=\"1\") polyline.ql-even.ql-fill(points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\") span.ql-formats button.ql-video(type=\"button\") //- 使用iview modal Modal( v-model=\"imgModal\" title=\"选择图片\" :mask-closable=\"false\") div div(style=\"text-align: center\") input( ref=\"imgFileRef\" type=\"file\" style=\"display: none !important\" :accept=\"accept\" @change=\"imgFileChange\") div( ref=\"imgRef\" :style=\"`display: inline-block; width: 300px; height: 180px; border: 2px dashed; position: relative; border-color: ${ isDropImgOver ? '#666' : '#CCC' }`\" @click=\"$refs.imgFileRef.click()\") Progress( v-if=\"percent > 0 && percent import 'quill/dist/quill.core.css' import 'quill/dist/quill.snow.css' import 'quill/dist/quill.bubble.css' import _Quill from 'quill' import { quillEditor } from 'vue-quill-editor' // 默认图片类型 const allowType = { '.png': 'image/png', '.jpg': 'image/jpeg'/* , '.jpeg': 'image/jpeg', '.bmp': 'image/bmp', '.gif': 'image/gif', '.svg': 'image/svg+xml', '.tif': 'image/tiff' */ } /** * 对Quill的自定义修改 */ const Quill = window.Quill || _Quill // 将样式默认使用class的替换为内联样式 let SizeStyle = Quill.import('attributors/style/size') let FontStyle = Quill.import('attributors/style/font') let AlignStyle = Quill.import('attributors/style/align') // 自定义字体大小尺寸，需对应修改html中下拉框，以及相关样式 SizeStyle.whitelist = ['12px', '16px', '18px', '20px', '22px', '24px', '26px', '28px', '30px', '32px'] // 自定义字体类型，需对应修改html中下拉框，以及相关样式 FontStyle.whitelist = ['宋体', '黑体', '楷体', '微软雅黑', 'Arial', 'Verdana', 'Georgia', 'Times New Roman', 'Microsoft JhengHei', 'Trebuchet MS', 'Courier New', 'Impact', 'Comic Sans MS', 'Consolas'] Quill.register(SizeStyle, true) Quill.register(FontStyle, true) Quill.register(AlignStyle, true) export default { name: 'Editor', components: { quillEditor }, props: { value: String, placeholder: String }, data () { return { content: this.value, toolbar: '', imgModal: false, imgUrl: '', netImgUrl: '', isDropImgOver: false } }, computed: { editor () { return this.$refs.editorRef.quill }, accept () { return Object.keys(allowType).join(',') }, editorOption () { // 解决同一个组件中出现多个富文本id冲突的问题 let id = 'toolbar-' + Math.random().toString(16).substring(2) this.toolbar = id // eslint-disable-line return { placeholder: this.placeholder, modules: { toolbar: '#' + id } } } }, watch: { value (val) { if (this.editor && val !== this.content) this.content = val }, modal (val) { if (!val) { this.imgUrl = '' this.netImgUrl = '' } } }, mounted () { this.$nextTick(() => { /** * 拖拽上传图片并插入富文本 */ // 获取quillEditor中的editor let editor = this.$refs.editorRef.$refs.editor editor.ondragenter = e => this.dropInsertHandler(e) editor.ondragover = e => this.dropInsertHandler(e) editor.ondragleave = e => this.dropInsertHandler(e) editor.ondrop = e => { const files = e.dataTransfer.files if (files && files.length > 0) { this.fileUpload(files[0], this.insertImg) } this.dropInsertHandler(e) } /** * 图片选择器拖拽上传 */ let imgRef = this.$refs.imgRef imgRef.ondragenter = e => this.imgDropHandler(e) imgRef.ondragover = e => this.imgDropHandler(e) imgRef.ondragleave = e => this.imgDropHandler(e, false) imgRef.ondrop = (e) => { const files = e.dataTransfer.files if (files && files.length > 0) { this.fileUpload(files[0]) } this.imgDropHandler(e, false) } }) }, methods: { fileUpload (file, callback) { // 判断格式 // 判断大小 // ... // 上传图片并返回图片访问url // this.imgUrl = imgUrl // callback && callback() }, insertImg () { if (this.imgUrl) { this.editor.focus() this.editor.insertEmbed(this.editor.getSelection().index, 'image', this.imgUrl) this.modal = false } else alert('没有可用的图片！') }, onContentChange () { this.$emit('input', this.content) }, imgFileChange ({ target: { files } }) { if (files && files.length > 0) { this.fileUpload(files[0]) } }, imgDropHandler (e, isOver = true) { this.dropInsertHandler() this.isDropImgOver = isOver } dropInsertHandler (e) { e.preventDefault() // 阻止离开时的浏览器默认行为 e.stopPropagation() // 阻止冒泡 } } } .ql-container font-size 14px .ql-snow .ql-picker &.ql-size .ql-picker-item &[data-value=\"12px\"]::before font-size 12px &[data-value=\"16px\"]::before font-size 16px &[data-value=\"18px\"]::before font-size 18px &[data-value=\"20px\"]::before font-size 20px &[data-value=\"22px\"]::before font-size 22px &[data-value=\"24px\"]::before font-size 24px &[data-value=\"26px\"]::before font-size 26px &[data-value=\"28px\"]::before font-size 28px &[data-value=\"30px\"]::before font-size 30px &[data-value=\"32px\"]::before font-size 32px &.ql-font .ql-picker-item &[data-value=\"宋体\"]::before font-family '宋体' &[data-value=\"黑体\"]::before font-family '黑体' &[data-value=\"楷体\"]::before font-family '楷体' &[data-value=\"微软雅黑\"]::before font-family '微软雅黑' &[data-value=\"Arial\"]::before font-family 'Arial' &[data-value=\"Verdana\"]::before font-family 'Verdana' &[data-value=\"Georgia\"]::before font-family 'Georgia' &[data-value=\"Times New Roman\"]::before font-family 'Times New Roman' &[data-value=\"Microsoft JhengHei\"]::before font-family 'Microsoft JhengHei' &[data-value=\"Trebuchet MS\"]::before font-family 'Trebuchet MS' &[data-value=\"Courier New\"]::before font-family 'Courier New' &[data-value=\"Impact\"]::before font-family 'Impact' &[data-value=\"Comic Sans MS\"]::before font-family 'Comic Sans MS' &[data-value=\"Consolas\"]::before font-family 'Consolas' Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-23 14:59:11 "},"frontend/vue-cli-3.html":{"url":"frontend/vue-cli-3.html","title":"Vue-Cli-3","keywords":"","body":"Vue-Cli-3 根据提示完成初始化项目后可以使用vue ui命令使用GUI界面管理项目默认配置可以满足绝大多数项目，非常方便如需进一步了解可参考VUE CLI官方文档 配置 在项目根目录下添加vue.config.js const path = require('path') function resolve (dir) { return path.join(__dirname, dir) } module.exports = { devServer: { // 端口 port: 8520, // 跨域（本人使用vue-cli-3没有此配置也不会出现跨域问题，具体原因没有深入研究） proxy: { '/api/': { target: 'http://127.0.0.1/', changeOrigin: true } } }, // webpack链式操作 chainWebpack: config => { // 别名 config.resolve.alias .set('@', resolve('src')) .set('@api', resolve('src/api')) .set('@store', resolve('src/store')) .set('@pages', resolve('src/pages')) .set('@layouts', resolve('src/layouts')) .set('@components', resolve('src/components')) .set('@styles', resolve('src/assets/styles')) .set('@images', resolve('src/assets/images')) .set('@utils', resolve('src/utils')) .set('@static', resolve('static')) } } ` Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-01 14:00:32 "},"frontend/questions.html":{"url":"frontend/questions.html","title":"常见问题","keywords":"","body":"常见问题 1、vue服务端渲，染服务器内容和客户端虚拟DOM不匹配 使用Nuxtjs时遇到的问题 [Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside , or missing . Bailing hydration and performing full client-side render. /** * plugins/vue-carousel-card.js */ import Vue from 'vue' export default () => { if (!process.browser) return false // 只有在客户端渲染时引入组件并注册，问题出在此处，服务端和客户端不一致 const { CarouselCard, CarouselCardItem } = require('vue-carousel-card') Vue.component(CarouselCard.name, CarouselCard) Vue.component(CarouselCardItem.name, CarouselCardItem) } 解决方法（1） 使用包裹该组件 no-ssr CarouselCard(:interval=\"7000\" height=\"300px\" type=\"card\" arrow=\"always\") CarouselCardItem(v-for=\"i in 6\" :key=\"i\") h1(v-text=\"i\") 优点：方便快捷起效快，不需要对dependencies的vue组件，有特殊需求缺点：真的不会SSR 解决方法（2） 不区分服务端渲染还是客户端，直接引入并注册组件，以Nuxtjs为例 /** * @/plugins/vue-carousel-card.js */ import Vue from 'vue' import { CarouselCard, CarouselCardItem } from 'vue-carousel-card' import 'vue-carousel-card/styles/index.css' export default () => { Vue.component(CarouselCard.name, CarouselCard) Vue.component(CarouselCardItem.name, CarouselCardItem) } /** * nuxt.config.js */ plugins: [ '@/plugins/vue-carousel-card' ] 但这样又会出现新的问题如：window is not defined、document is not defined 等问题需要进行判断，如果在服务端的情况下不去执行使用window或者document的代码 // 部分代码示例（1） import ResizeObserver from 'resize-observer-polyfill' const isServer = typeof window === 'undefined' const addResizeListener = (el, fn) => { // 由于ResizeObserver中用到了document，此处直接跳过 if (isServer) return el.__ro__ = new ResizeObserver(resizeHandler) // 部分代码示例（2） if(process && process.browser){ // 判断是客户端再执行 var FastClick = require('fastclick'); FastClick.attach(document.body); } 坑点在.vue文件中的样式最后经过webpack打包成js文件，会用到document（作用是将样式插入到文档） // 编译后的部分代码示例 function addStyle (obj /* StyleObjectPart */) { var update, remove var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]') if (styleElement) { if (isProduction) { // has SSR styles and in production mode. // simply do nothing. 解决方法，将样式分离，单独引入 优点：照样SSR缺点：对dependencies的vue组件有特殊要求 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-28 17:56:04 "},"index/git.html":{"url":"index/git.html","title":"Git","keywords":"","body":"Git Git使用过部分命令总结，详细可查看Git文档。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 10:49:12 "},"git/git.html":{"url":"git/git.html","title":"Git","keywords":"","body":"Git常用命令 提交gh-pages分支以供展示 # _book为打包后的文件目录 git subtree push --prefix _book origin gh-pages 切换分支 # 显示所有参数使用方法 git branch -h # 查看所有分支，参数v显示版本号注释等附加信息，a显示所有 git branch -va # * 开头的为当前本地分支，origin为远程分支 # gh-pages 5c3cbe8 Create CNAME # * master 20575cc shouye # remotes/origin/HEAD -> origin/master # remotes/origin/gh-pages 5c3cbe8 Create CNAME # remotes/origin/master 20575cc shouye # remotes/origin/test 20575cc shouye # 切换分支 git checkout gh-pages # 创建并切换分支 git checkout -b dev Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"index/linux.html":{"url":"index/linux.html","title":"Linux","keywords":"","body":"Linux Linux系统下常用环境的安装以及相关配置，安装、配置、使用后总结。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 10:47:33 "},"linux/jdk.html":{"url":"linux/jdk.html","title":"JDK","keywords":"","body":"Linux下JDK安装及配置 以Centos 7.4，JDK 1.8 为例 # 下载二进制压缩包https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html # jdk-8u201-linux-x64.tar.gz # 解压 tar -xzvf jdk-8u191-linux-x64.tar.gz # 修改profile vim /etc/profile # 最后面添加 export JAVA_HOME=/home/jdk1.8.0_191 export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin # 重新初始化profile source /etc/profile # 查看配置结果 java -version Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-22 10:27:24 "},"linux/mysql.html":{"url":"linux/mysql.html","title":"MySQL","keywords":"","body":"MySQL（Linux环境下） 以Centos 7.4，MySQL5.7.x为例 安装 # 1、查看已安装的mysql rpm -qa|grep -i mysql # 2、删除之前版本 yum -y remove 已安装的名称 # 如： yum -y remove mysql-community-client-5.6.38-2.el7.x86_64 # 3、更新源并安装 cd /home wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm rpm -ivh mysql57-community-release-el7-11.noarch.rpm yum -y install mysql-server # 4、启动服务 systemctl start mysqld 移动相关目录 移动data目录，log目录，相关操作（安装完需先启动mysql，生成数据库文件和log文件之后再进行移动操作） # 停止服务 systemctl stop mysqld # 创建目录 mkdir -p /home/mysql/data/ # 修改属主和属组 chown mysql.mysql /home/mysql/data # 复制mysql data目录 cp -a /var/lib/mysql /home/mysql/data/ # 建立链接（如果更新data目录后无法启动适应链接的方式） #ln -s /home/mysql/data/mysql /usr/lib/mysql # 修改my.cfg vim /etc/my.cnf datadir=/home/mysql/data/mysql # 复制mysql原有data目录可不修改此配置 #socket=/home/mysql/data/mysql/mysql.sock # 创建目录 mkdir -p /home/mysql/logs # 修改属主和属组 chown mysql.mysql /home/mysql/logs # 移动log文件，-a带权限复制 cp -a /var/log/mysqld.log /home/mysql/logs # 修改log目录 vim /etc/my.cnf server_id=1 expire_logs_days=10 log-error=/home/mysql/logs/mysqld.log # 启动mysql systemctl stop mysqld # 开启自动启动 systemctl enable mysqld 创建用户、数据库，授权数据库权限，远程连接 -- 1、创建用户名，%代表可以远程连接 use mysql; CREATE USER 'username'@'%' IDENTIFIED BY 'password'; -- 2、创建数据库 create database testdb; -- 3、用户授权使用指定数据库的指定权限 GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON testdb.* TO 'username'@'%' IDENTIFIED BY 'password'; FLUSH PRIVILEGES; 修改root密码 # 1、修改配置文件 vim /etc/my.cnf # 增加 skip-grant-tables # 2、重启mysql服务 systemctl restart mysqld # 3、进入mysq命令行 mysql -uroot # ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2) #mysql -uroot -S /home/mysql/data/mysql/mysql.sock # 4、执行sql use mysql; SET SQL_SAFE_UPDATES = 0; update mysql.user set authentication_string=password('root') where User='root'; flush privileges; SET SQL_SAFE_UPDATES = 1; # 5、修改配置文件 vim /etc/my.cnf # 去掉 skip-grant-tables # 6、重启mysql服务 systemctl restart mysqld # 7、使用新密码进入mysql mysql -uroot -p # 输入密码进入 常见错误 ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executin -- 解决方法 -- 1、修改用户密码 alter user 'root'@'localhost' identified by 'youpassword'; -- 或者 set password=password(\"youpassword\"); -- 2、刷新权限 flush privileges; help contents; Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"linux/mount.html":{"url":"linux/mount.html","title":"挂载硬盘","keywords":"","body":"Linux下永久挂载硬盘到指定目录 以Centos 7.4为例 # 1、查看可挂载硬盘 fdisk -l # 2、磁盘分区 fdisk /dev/vdb # 3、参数：输入 n， p， 1， 回车，回车， wq # 4、格式化硬盘 mkfs.ext4 /dev/vdb1 # 5、挂载到指定目录 mount /dev/vdb1 /home # 6、写入分区表（自动挂载） echo '/dev/vdb1 /home ext4 defaults 0 0' >> /etc/fstab # 7、查看挂载结果 df -h Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"linux/nginx.html":{"url":"linux/nginx.html","title":"Nginx","keywords":"","body":"Nginx（Linux环境下） 以Centos 7.4，Nginx 1.15.8为例 安装 # 1、编译依赖 yum -y install gcc gcc-c++ # 2、nginx依赖 yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel # 3、下载 解压nginx-1.15.8.tar.gz tar -xzvf nginx-1.15.8.tar.gz # 4、创建nginx用户 useradd -s /bin/false -M nginx # 5、编译 cd nginx-1.15.8 # 生成makefile，指定用户、组、安装路径、相关模块 ./configure --user=nginx --group=nginx --prefix=/home/nginx-1.15.8-01/ --with-http_v2_module --with-http_ssl_module --with-http_sub_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre make && make install # 6、创建nginx命令软链接到环境变量 ln -s /home/nginx-1.15.8-01/sbin/* /usr/local/sbin/ 配置SSL（https） # 安装时--with-http_ssl_module，添加ssl模块 http { server { listen 443 ssl; # 此处加ssl参数，可以不用使用ssl on配置 server_name www.xxx.com; # 域名 #ssl on; ssl_certificate /opt/ssl/xxx.pem; # crt / pem 文件 ssl_certificate_key /opt/ssl/xxx.key; # key ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { root html; index index.html index.htm; } } server { listen 80; server_name xxx.com www.xxx.com; rewrite ^(.*) https://$host$1 permanent; } } 接口代理跨域 http { server { location /api/ { proxy_pass http://192.168.0.12:8080/api/; } # ^~ 表示以某前缀开头 location ^~ /admin/ { proxy_pass http://admin; } } } 负载均衡 tomcat 为例 html { # 添加tomcat列表，真实应用服务器都放在这 upstream tomcat_pool { # server tomcat地址:端口号 weight表示权值，权值越大，被分配的几率越大; server 192.168.0.223:8080 weight=4 max_fails=2 fail_timeout=30s; server 192.168.0.224:8080 weight=4 max_fails=2 fail_timeout=30s; } server { # 默认请求设置 location / { proxy_pass http://tomcat_pool; # 转向tomcat处理 } } } gzip http { # gzip模块设置 gzip on; # 开启gzip压缩输出 gzip_min_length 1k; # 最小压缩文件大小 gzip_buffers 4 16k; # 压缩缓冲区 gzip_http_version 1.1; # 用了反向代理的话，末端通信是HTTP/1.0，默认是HTTP/1.1 gzip_comp_level 2; # 压缩等级 gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; # 压缩类型 gzip_vary off; # 跟Squid等缓存服务有关，on的话会在Header里增加\"Vary: Accept-Encoding\" gzip_disable \"MSIE [1-6]\\.\"; # ie6不压缩 } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"index/jenkins.html":{"url":"index/jenkins.html","title":"Jenkins","keywords":"","body":"Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 14:03:11 "},"jenkins/install.html":{"url":"jenkins/install.html","title":"安装","keywords":"","body":"Jenkins安装 Jenkins安装前需先安装JDK，可参照JDK安装及配置 安装 方式1，推荐 # 添加yum源 sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo # 导入密钥 sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key # 安装 sudo yum install -y jenkins 方式2，下载离线安装包安装 以Centos 7.4 为例，下载jenkins-2.150.3-1.1.noarch.rpm rpm -ih jenkins-2.150.3-1.1.noarch.rpm 修改java目录 vim /etc/init.d/jenkins # 大约75行，添加java目录 candidates=\" /home/jdk1.8.0_191/bin/java ... \" # 保存后运行一下命令，重新加载 systemctl daemon-reload # 启动 systemctl start jenkins 开机启动 # 由于Jenkins不是Native Service，所以需要用chkconfig命令而不是systemctl命令 sudo /sbin/chkconfig jenkins on 修改默认端口号 vim /etc/sysconfig/jenkins # 大约56行，将默认端口8080修改即可 JENKINS_PORT=\"8765\" # 重启服务 systemctl restart jenkins Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-22 10:28:16 "},"index/springboot.html":{"url":"index/springboot.html","title":"SpringBoot","keywords":"","body":"SpringBoot SpringBoot开发中遇到过的问题总结。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 10:46:31 "},"springboot/put-config.html":{"url":"springboot/put-config.html","title":"Put请求配置","keywords":"","body":"Put请求无法获取参数对象 SpringBoot中使用RESTful API设计规范，如果Put请求无法将参数转为对象，以下两种配置可选。 @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport｛ /** * 解决put请求无法将参数转为对象 * @return */ @Bean public HttpPutFormContentFilter httpPutFormContentFilter() { return new HttpPutFormContentFilter(); } } // 使用：@Component，原理一样，开启：HttpPutFormContentFilter @Component public class PutFilter extends HttpPutFormContentFilter { } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"springboot/fastjson-config.html":{"url":"springboot/fastjson-config.html","title":"FastJson配置","keywords":"","body":"FastJson处理响应数据 SpringBoot中使用FastJson将响应的数据转成json相关配置 @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport { /** * FastJson对响应数据处理的相关配置 */ @Override public void configureMessageConverters(List> converters) { FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter(); FastJsonConfig fastJsonConfig = new FastJsonConfig(); // 序列化 fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat); // 时间戳格式 fastJsonConfig.setDateFormat(\"yyyy-MM-dd HH:mm:ss\"); // 处理中文乱码问题 List fastMediaTypes = new ArrayList(); fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8); fastConverter.setSupportedMediaTypes(fastMediaTypes); // 为空返回值转换 ValueFilter valueFilter = new ValueFilter() { /** * Object cls 是class * String key 是key值 * Object val 是value值 */ public Object process(Object cls, String key, Object val) { if (null == val) val = \"\"; return val; } }; fastJsonConfig.setSerializeFilters(valueFilter); fastConverter.setFastJsonConfig(fastJsonConfig); converters.add(fastConverter); } } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "},"springboot/cors-config.html":{"url":"springboot/cors-config.html","title":"跨域配置","keywords":"","body":"跨域配置 SpringBoot添加跨域配置有以下两种配置方法 @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport { /** * 跨域配置 */ @Override protected void addCorsMappings(CorsRegistry registry) { registry.addMapping(\"/**\") // 允许跨域的源 .allowedOrigins(\"*\") // 是否允许浏览器发送Cookie .allowCredentials(true) // 客户端所要访问的资源允许使用的方法或方法列表 .allowedMethods(\"OPTIONS\", \"HEAD\", \"POST\", \"GET\", \"PUT\", \"DELETE\") // 正式请求的首部信息 // x-requested-with：ajax请求 .allowedHeaders(\"X-Requested-With\") // preflight request （预检请求）的返回结果 //（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） // 可以被缓存多久 .maxAge(3600); super.addCorsMappings(registry); } } / ** * 跨域访问过滤器 */ @Component public class CorsFilter implements Filter { @Override public void destroy() { } @Override public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { HttpServletResponse response = (HttpServletResponse) res; HttpServletRequest request = (HttpServletRequest) req; // 也可以使用\"*\"，最好是从request中的header中获取Origin，来做配置 response.setHeader(\"Access-Control-Allow-Origin\", request.getHeader(\"Origin\")); // 是否允许浏览器发送Cookie response.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); // 客户端所要访问的资源允许使用的方法或方法列表 response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE\"); // 正式请求的首部信息 // x-requested-with：ajax请求 response.setHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With\"); // preflight request （预检请求）的返回结果 //（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） // 可以被缓存多久 response.setHeader(\"Access-Control-Max-Age\", \"3600\"); chain.doFilter(req, res); } @Override public void init(FilterConfig config) throws ServletException { } } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 10:11:30 "}}