{"./":{"url":"./","title":"前言","keywords":"","body":"个人主页 个人主页地址：https://blog.wdg.pub/ 主要是个人学习、工作经验的总结，不断完善中··· 如果存在错误还请多指教，提交反馈 个人GitHub地址：https://github.com/jekorx Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"index/nodejs.html":{"url":"index/nodejs.html","title":"Nodejs","keywords":"","body":"Nodejs Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"nodejs/process-manager.html":{"url":"nodejs/process-manager.html","title":"PM2","keywords":"","body":"PM2（Process Manager 2） Node进程管理工具，简化Node App管理的繁琐任务，如性能监控、自动重启、负载均衡等。 常用命令 # 启动app pm2 start yarn --name AppName -- start # 查看所有app pm2 list # or pm2 ls # 启动，all表示全部app，CMD表示命令（如：yarn），-i max 表示cluster模式，数量为最大cpu核数，--watch表示当文件变化时自动重启应用，args表示参数 pm2 start [id | AppName | all | CMD] --name [AppName] -i max --watch -- [args] # 停止，all表示全部app pm2 stop [id | AppName | all] # 重启，all表示全部app pm2 restart [id | AppName | all] # 删除，all表示全部app pm2 delete [id | AppName | all] # 监控 pm2 monit [id | AppName] # 日志 pm2 logs 常见错误 windows系统常见错误（1） # 报错信息 C:\\USERS\\\\APPDATA\\ROAMING\\NPM\\YARN.CMD:1 (function (exports, require, module, __filename, __dirname) { @IF EXIST \"%~dp0\\node.exe\" ( ^ SyntaxError: Invalid or unexpected token at new Script (vm.js:79:7) at createScript (vm.js:251:10) at Object.runInThisContext (vm.js:303:10) at Module._compile (internal/modules/cjs/loader.js:656:28) at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10) at Module.load (internal/modules/cjs/loader.js:598:32) at tryModuleLoad (internal/modules/cjs/loader.js:537:12) at Function.Module._load (internal/modules/cjs/loader.js:529:3) at Object. (C:\\Users\\wangdg\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\pm2\\lib\\ProcessContainerFork.js:27:21) at Module._compile (internal/modules/cjs/loader.js:688:30) C:\\USERS\\\\APPDATA\\ROAMING\\NPM\\YARN.CMD:1 (function (exports, require, module, __filename, __dirname) { @IF EXIST \"%~dp0\\node.exe\" ( # 错误分析 在Windows上，yarn.cmd它不是有效的，您必须直接运行Node.js命令 # 解决方法 pm2 start C:\\Users\\\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin\\yarn.js --name nuxt -- start Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"nodejs/http-server.html":{"url":"nodejs/http-server.html","title":"Http-Server","keywords":"","body":"http-server http-server是一个简单的，零配置的命令行http服务器。 安装 npm install http-server -g # or yarn global add http-server 使用 http-server [path] [options] 可用选项 -p 要使用的端口（默认为8080） -a 要使用的地址（默认为0.0.0.0） -d 显示目录列表（默认为'True'） -i 显示autoIndex（默认为'True'） -g或者--gzip当启用时（默认为'False'），它将./public/some-file.js.gz代替./public/some-file.js当文件的gzip压缩版本存在且请求接受gzip编码时。 -e或者--ext如果没有提供默认文件扩展名（默认为'html'） -s或者--silent从输出中抑制日志消息 --cors通过Access-Control-Allow-Origin标头启用CORS -o 启动服务器后打开浏览器窗口 -c设置缓存控制max-age标头的缓存时间（以秒为单位），例如-c10为10秒（默认为“3600”）。要禁用缓存，请使用-c-1。 -U或--utc在日志消息中使用UTC时间格式。 -P或者将--proxy所有无法在本地解析的请求代理到给定的URL。例如：-P http://someurl.com -S或--ssl启用https。 -C或--certssl cert文件的路径（默认值：cert.pem）。 -K或--keyssl密钥文件的路径（默认值：key.pem）。 -r或--robots提供/robots.txt（其内容默认为'User-agent：* \\ nDisisis：/'） -h或--help打印此列表并退出。 Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"index/frontend.html":{"url":"index/frontend.html","title":"前端","keywords":"","body":"Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"frontend/axios.html":{"url":"frontend/axios.html","title":"Axios","keywords":"","body":"Axios Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 常用配置 import axios from 'axios' import qs from 'qs' /** * axios config */ // url 前缀 axios.defaults.baseURL = process.env.NODE_ENV === 'production' ? '/web/' : '/api/' /** * axios 默认 Content-Type: application/json;charset=UTF-8 * 请求正文为Request Payload，格式是json格式的字符串 * 台用@RequestParam是接收不到参数的，只能用@RequestBody * 配置transformRequest，参数使用qs转换 * 请求头Content-Type会被设置为: application/x-www-form-urlencoded * 请求正文为Form Data，格式是key=value&key1=value2 * 对于 Form Data 请求，后台无需任何注解，即可解析参数 */ axios.defaults.withCredentials = true // 请求数据转json字符串（JSON.stringify()不行） axios.defaults.transformRequest = [params => qs.stringify(params)] // 请求统一额外参数 axios.defaults.params = { apiuser: 'debug' } // 请求拦截器 axios.interceptors.request.use(config => { // 请求发出前，可以开始加载动画之类的操作 return config }, error => { // 请求发出错误处理 return Promise.reject(error) }) // 响应拦截器 axios.interceptors.response.use(response => { // 接收到响应处理，停止加载动画之类操作 return response }, error => { // 响应错误处理，统一异常处理 console.log(error.stack) return Promise.reject(error) }) Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"frontend/editorconfig.html":{"url":"frontend/editorconfig.html","title":"EditorConfig","keywords":"","body":"EditorConfig 项目根目录中添加.editorconfig文件，并在开发工具中安装相应插件，如：VSCode安装EditorConfig for Visual Studio Code # editorconfig.org root = true [*] indent_style = space indent_size = 2 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true # markdown文件不去掉结尾空格 [*.md] trim_trailing_whitespace = false Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"index/git.html":{"url":"index/git.html","title":"Git","keywords":"","body":"Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:39:26 "},"git/git.html":{"url":"git/git.html","title":"Git","keywords":"","body":"Git常用命令 提交gh-pages分支以供展示 # _book为打包后的文件目录 git subtree push --prefix _book origin gh-pages 切换分支 # 显示所有参数使用方法 git branch -h # 查看所有分支，参数v显示版本号注释等附加信息，a显示所有 git branch -va # * 开头的为当前本地分支，origin为远程分支 # gh-pages 5c3cbe8 Create CNAME # * master 20575cc shouye # remotes/origin/HEAD -> origin/master # remotes/origin/gh-pages 5c3cbe8 Create CNAME # remotes/origin/master 20575cc shouye # remotes/origin/test 20575cc shouye # 切换分支 git checkout gh-pages # 创建并切换分支 git checkout -b dev Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:39:31 "},"index/linux.html":{"url":"index/linux.html","title":"Linux","keywords":"","body":"Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"linux/jdk-config.html":{"url":"linux/jdk-config.html","title":"JDK配置","keywords":"","body":"Linux下JDK配置 # 修改profile vim /etc/profile # 最后面添加 export JAVA_HOME=/home/jdk1.8.0_191 export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin # 重新初始化profile source /etc/profile Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"linux/mysql.html":{"url":"linux/mysql.html","title":"MySQL","keywords":"","body":"MySQL（Linux环境下） 以Centos 7.4，MySQL5.7.x为例 安装 # 1、查看已安装的mysql rpm -qa|grep -i mysql # 2、删除之前版本 yum -y remove 已安装的名称 # 如： yum -y remove mysql-community-client-5.6.38-2.el7.x86_64 # 3、更新源并安装 cd /home wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm rpm -ivh mysql57-community-release-el7-11.noarch.rpm yum -y install mysql-server # 4、启动服务 systemctl start mysqld 移动相关目录 移动data目录，log目录，相关操作（安装完需先启动mysql，生成数据库文件和log文件之后再进行移动操作） # 停止服务 systemctl stop mysqld # 创建目录 mkdir -p /home/mysql/data/ # 修改属主和属组 chown mysql.mysql /home/mysql/data # 复制mysql data目录 cp -a /var/lib/mysql /home/mysql/data/ # 建立链接（如果更新data目录后无法启动适应链接的方式） #ln -s /home/mysql/data/mysql /usr/lib/mysql # 修改my.cfg vim /etc/my.cnf datadir=/home/mysql/data/mysql # 复制mysql原有data目录可不修改此配置 #socket=/home/mysql/data/mysql/mysql.sock # 创建目录 mkdir -p /home/mysql/logs # 修改属主和属组 chown mysql.mysql /home/mysql/logs # 移动log文件，-a带权限复制 cp -a /var/log/mysqld.log /home/mysql/logs # 修改log目录 vim /etc/my.cnf server_id=1 expire_logs_days=10 log-error=/home/mysql/logs/mysqld.log # 启动mysql systemctl stop mysqld # 开启自动启动 systemctl enable mysqld 创建用户、数据库，授权数据库权限，远程连接 -- 1、创建用户名，%代表可以远程连接 use mysql; CREATE USER 'username'@'%' IDENTIFIED BY 'password'; -- 2、创建数据库 create database testdb; -- 3、用户授权使用指定数据库的指定权限 GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON testdb.* TO 'username'@'%' IDENTIFIED BY 'password'; FLUSH PRIVILEGES; 修改root密码 # 1、修改配置文件 vim /etc/my.cnf # 增加 skip-grant-tables # 2、重启mysql服务 systemctl restart mysqld # 3、进入mysq命令行 mysql -uroot # ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2) #mysql -uroot -S /home/mysql/data/mysql/mysql.sock # 4、执行sql use mysql; SET SQL_SAFE_UPDATES = 0; update mysql.user set authentication_string=password('root') where User='root'; flush privileges; SET SQL_SAFE_UPDATES = 1; # 5、修改配置文件 vim /etc/my.cnf # 去掉 skip-grant-tables # 6、重启mysql服务 systemctl restart mysqld # 7、使用新密码进入mysql mysql -uroot -p # 输入密码进入 常见错误 ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executin -- 解决方法 -- 1、修改用户密码 alter user 'root'@'localhost' identified by 'youpassword'; -- 或者 set password=password(\"youpassword\"); -- 2、刷新权限 flush privileges; help contents; Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"linux/mount.html":{"url":"linux/mount.html","title":"挂载硬盘","keywords":"","body":"Linux下永久挂载硬盘到指定目录 以Centos 7.4为例 # 1、查看可挂载硬盘 fdisk -l # 2、磁盘分区 fdisk /dev/vdb # 3、参数：输入 n， p， 1， 回车，回车， wq # 4、格式化硬盘 mkfs.ext4 /dev/vdb1 # 5、挂载到指定目录 mount /dev/vdb1 /home # 6、写入分区表（自动挂载） echo '/dev/vdb1 /home ext4 defaults 0 0' >> /etc/fstab # 7、查看挂载结果 df -h Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"linux/nginx.html":{"url":"linux/nginx.html","title":"Nginx","keywords":"","body":"Nginx（Linux环境下） 以Centos 7.4，Nginx 1.15.8为例 安装 # 1、编译依赖 yum -y install gcc gcc-c++ # 2、nginx依赖 yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel # 3、下载 解压nginx-1.15.8.tar.gz tar -xzvf nginx-1.15.8.tar.gz # 4、创建nginx用户 useradd -s /bin/false -M nginx # 5、编译 cd nginx-1.15.8 # 生成makefile，指定用户、组、安装路径、相关模块 ./configure --user=nginx --group=nginx --prefix=/home/nginx-1.15.8-01/ --with-http_v2_module --with-http_ssl_module --with-http_sub_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre make && make install # 6、创建nginx命令软链接到环境变量 ln -s /home/nginx-1.15.8-01/sbin/* /usr/local/sbin/ 配置SSL（https） # 安装时--with-http_ssl_module，添加ssl模块 http { server { listen 443 ssl; # 此处加ssl参数，可以不用使用ssl on配置 server_name www.xxx.com; # 域名 #ssl on; ssl_certificate /opt/ssl/xxx.pem; # crt / pem 文件 ssl_certificate_key /opt/ssl/xxx.key; # key ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { root html; index index.html index.htm; } } server { listen 80; server_name xxx.com www.xxx.com; rewrite ^(.*) https://$host$1 permanent; } } 接口代理跨域 http { server { location /api/ { proxy_pass http://192.168.0.12:8080/api/; } # ^~ 表示以某前缀开头 location ^~ /admin/ { proxy_pass http://admin; } } } 负载均衡 tomcat 为例 html { # 添加tomcat列表，真实应用服务器都放在这 upstream tomcat_pool { # server tomcat地址:端口号 weight表示权值，权值越大，被分配的几率越大; server 192.168.0.223:8080 weight=4 max_fails=2 fail_timeout=30s; server 192.168.0.224:8080 weight=4 max_fails=2 fail_timeout=30s; } server { # 默认请求设置 location / { proxy_pass http://tomcat_pool; # 转向tomcat处理 } } } gzip http { # gzip模块设置 gzip on; # 开启gzip压缩输出 gzip_min_length 1k; # 最小压缩文件大小 gzip_buffers 4 16k; # 压缩缓冲区 gzip_http_version 1.1; # 用了反向代理的话，末端通信是HTTP/1.0，默认是HTTP/1.1 gzip_comp_level 2; # 压缩等级 gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; # 压缩类型 gzip_vary off; # 跟Squid等缓存服务有关，on的话会在Header里增加\"Vary: Accept-Encoding\" gzip_disable \"MSIE [1-6]\\.\"; # ie6不压缩 } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"index/springboot.html":{"url":"index/springboot.html","title":"SpringBoot","keywords":"","body":"Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"springboot/put-config.html":{"url":"springboot/put-config.html","title":"Put请求配置","keywords":"","body":"Put请求无法获取参数对象 SpringBoot中使用RESTful API设计规范，如果Put请求无法将参数转为对象，以下两种配置可选。 @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport｛ /** * 解决put请求无法将参数转为对象 * @return */ @Bean public HttpPutFormContentFilter httpPutFormContentFilter() { return new HttpPutFormContentFilter(); } } // 使用：@Component，原理一样，开启：HttpPutFormContentFilter @Component public class PutFilter extends HttpPutFormContentFilter { } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "},"springboot/fastjson-config.html":{"url":"springboot/fastjson-config.html","title":"FastJson配置","keywords":"","body":"FastJson处理响应数据 SpringBoot中使用FastJson将响应的数据转成json相关配置 @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport { /** * FastJson对响应数据处理的相关配置 */ @Override public void configureMessageConverters(List> converters) { FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter(); FastJsonConfig fastJsonConfig = new FastJsonConfig(); // 序列化 fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat); // 时间戳格式 fastJsonConfig.setDateFormat(\"yyyy-MM-dd HH:mm:ss\"); // 处理中文乱码问题 List fastMediaTypes = new ArrayList(); fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8); fastConverter.setSupportedMediaTypes(fastMediaTypes); // 为空返回值转换 ValueFilter valueFilter = new ValueFilter() { /** * Object cls 是class * String key 是key值 * Object val 是value值 */ public Object process(Object cls, String key, Object val) { if (null == val) val = \"\"; return val; } }; fastJsonConfig.setSerializeFilters(valueFilter); fastConverter.setFastJsonConfig(fastJsonConfig); converters.add(fastConverter); } } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 14:47:28 "},"springboot/cors-config.html":{"url":"springboot/cors-config.html","title":"跨域配置","keywords":"","body":"跨域配置 SpringBoot添加跨域配置有以下两种配置方法 @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport { /** * 跨域配置 */ @Override protected void addCorsMappings(CorsRegistry registry) { registry.addMapping(\"/**\") // 允许跨域的源 .allowedOrigins(\"*\") // 是否允许浏览器发送Cookie .allowCredentials(true) // 客户端所要访问的资源允许使用的方法或方法列表 .allowedMethods(\"OPTIONS\", \"HEAD\", \"POST\", \"GET\", \"PUT\", \"DELETE\") // 正式请求的首部信息 // x-requested-with：ajax请求 .allowedHeaders(\"X-Requested-With\") // preflight request （预检请求）的返回结果 //（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） // 可以被缓存多久 .maxAge(3600); super.addCorsMappings(registry); } } / ** * 跨域访问过滤器 */ @Component public class CorsFilter implements Filter { @Override public void destroy() { } @Override public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { HttpServletResponse response = (HttpServletResponse) res; HttpServletRequest request = (HttpServletRequest) req; // 也可以使用\"*\"，最好是从request中的header中获取Origin，来做配置 response.setHeader(\"Access-Control-Allow-Origin\", request.getHeader(\"Origin\")); // 是否允许浏览器发送Cookie response.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); // 客户端所要访问的资源允许使用的方法或方法列表 response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE\"); // 正式请求的首部信息 // x-requested-with：ajax请求 response.setHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With\"); // preflight request （预检请求）的返回结果 //（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） // 可以被缓存多久 response.setHeader(\"Access-Control-Max-Age\", \"3600\"); chain.doFilter(req, res); } @Override public void init(FilterConfig config) throws ServletException { } } Copyright © blog.wdg.pub 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 09:13:18 "}}